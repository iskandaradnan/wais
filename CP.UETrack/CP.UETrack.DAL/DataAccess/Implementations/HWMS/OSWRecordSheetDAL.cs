using CP.Framework.Common.ExceptionHandler.ExceptionWrappers;
using CP.Framework.Common.Logging;
using CP.UETrack.DAL.DataAccess.Contracts.HWMS;
using CP.UETrack.DAL.DataAccess.Implementation;
using CP.UETrack.Model;
using CP.UETrack.Model.Common;
using CP.UETrack.Model.HWMS;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UETrack.DAL;


namespace CP.UETrack.DAL.DataAccess.Implementations.HWMS
{
    public class OSWRecordSheetDAL : IOSWRecordSheetDAL
    {
        private readonly string _FileName = nameof(BlockDAL);
        readonly UserDetailsModel _UserSession = new SessionHelper().UserSession();
        public OSWRecordSheetDropDown Load()
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Load), Level.Info.ToString());
                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                OSWRecordSheetDropDown oswrecordsheetDropdownvalues = new OSWRecordSheetDropDown();

                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "Sp_HWMS_OSWRecordSheetLoad";
                        cmd.Parameters.Clear();
                        cmd.Parameters.AddWithValue("@pScreenName", "OSWRecordSheet");
                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);

                        if (ds.Tables[0] != null)
                        {
                            oswrecordsheetDropdownvalues.WasteTypeLovs = dbAccessDAL.GetLovRecords(ds.Tables[0]);
                        }
                        if (ds.Tables[1] != null)
                        {
                            oswrecordsheetDropdownvalues.OSWRMonthLovs = dbAccessDAL.GetLovRecords(ds.Tables[1]);
                        }
                        if (ds.Tables[2] != null)
                        {
                            oswrecordsheetDropdownvalues.OSWRYearLovs = dbAccessDAL.GetLovRecords(ds.Tables[2]);
                        }
                        if (ds.Tables[3] != null)
                        {
                            oswrecordsheetDropdownvalues.OSWRCollectionTypeLovs = dbAccessDAL.GetLovRecords(ds.Tables[3]);
                        }
                        if (ds.Tables[4] != null)
                        {
                            oswrecordsheetDropdownvalues.OSWRStatusLovs = dbAccessDAL.GetLovRecords(ds.Tables[4]);
                        }
                        if (ds.Tables[5] != null)
                        {
                            oswrecordsheetDropdownvalues.OSWRCollectionStatusLovs = dbAccessDAL.GetLovRecords(ds.Tables[5]);
                        }
                        if (ds.Tables[6] != null)
                        {
                            oswrecordsheetDropdownvalues.QcLovs = dbAccessDAL.GetLovRecords(ds.Tables[6]);
                        }
                    }
                }

                Log4NetLogger.LogExit(_FileName, nameof(Load), Level.Info.ToString());
                return oswrecordsheetDropdownvalues;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public OSWRecordSheet AutoGeneratedCode()
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(AutoGeneratedCode), Level.Info.ToString());
                OSWRecordSheet oswrecordsheet = new OSWRecordSheet();

                var ds = new DataSet();

                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "Sp_HWMS_DocumentNo_AutoGenerated";
                        cmd.Parameters.AddWithValue("@pScreenName", "OSWRS");
                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                    }
                }
                if (ds.Tables.Count != 0)
                {
                    oswrecordsheet = (from n in ds.Tables[0].AsEnumerable()
                                      select new OSWRecordSheet
                                      {
                                          OSWRSNo = Convert.ToString(n["OSWRSNo"])
                                      }).FirstOrDefault();
                }
                Log4NetLogger.LogExit(_FileName, nameof(AutoGeneratedCode), Level.Info.ToString());
                return oswrecordsheet;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public OSWRecordSheet Save(OSWRecordSheet model, out string ErrorMessage)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Save), Level.Info.ToString());
                ErrorMessage = string.Empty;
                var spName = string.Empty;

                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "sp_HWMS_OSWRecordSheet";

                        cmd.Parameters.AddWithValue("@OSWRId", model.OSWRId);
                        cmd.Parameters.AddWithValue("@CustomerId", model.CustomerId);
                        cmd.Parameters.AddWithValue("@FacilityId", model.FacilityId);
                        cmd.Parameters.AddWithValue("@OSWRSNo", model.OSWRSNo);
                        cmd.Parameters.AddWithValue("@TotalPackage", model.TotalPackage);
                        cmd.Parameters.AddWithValue("@WasteType", model.WasteType);
                        cmd.Parameters.AddWithValue("@ConsignmentNo", model.ConsignmentNo);
                        cmd.Parameters.AddWithValue("@UserAreaCode", model.UserAreaCode);
                        cmd.Parameters.AddWithValue("@UserAreaName", model.UserAreaName);
                        cmd.Parameters.AddWithValue("@Month", model.Month);
                        cmd.Parameters.AddWithValue("@Year", model.Year);
                        cmd.Parameters.AddWithValue("@CollectionFrequency", model.CollectionFrequency);
                        cmd.Parameters.AddWithValue("@CollectionType", model.CollectionType);
                        cmd.Parameters.AddWithValue("@Status", model.Status);

                        var da = new SqlDataAdapter();
                        var ds1 = new DataSet();
                        da.SelectCommand = cmd;
                        da.Fill(ds);

                        if (ds.Tables.Count != 0)
                        {
                            cmd.Parameters.Clear();
                            model.OSWRId = Convert.ToInt32(ds.Tables[0].Rows[0]["OSWRId"]);
                            if (model.OSWRId == -1)
                            {
                                ErrorMessage = "WasteType  already exists";
                            }
                            else
                            {
                              
                                cmd.CommandText = "Sp_HWMS_OSWRecordSheet_OtherWasteSave";
                                cmd.Parameters.Clear();
                                foreach (var use in model.OSWRecordSheetList)
                                {
                                    cmd.Parameters.Clear();
                                    cmd.Parameters.AddWithValue("@OSWRecordId", use.OSWRecordId);
                                    cmd.Parameters.AddWithValue("@Date", use.Date);
                                    cmd.Parameters.AddWithValue("@CollectionTime", use.CollectionTime);
                                    cmd.Parameters.AddWithValue("@CollectionStatus", use.CollectionStatus);
                                    cmd.Parameters.AddWithValue("@QC", use.QC);
                                    cmd.Parameters.AddWithValue("@OSWRId", model.OSWRId);
                                    cmd.Parameters.AddWithValue("@IsDeleted", use.isDeleted);
                                    da.SelectCommand = cmd;
                                    da.Fill(ds1);


                                    if (ds1.Tables[0].Rows.Count > 0)
                                    {
                                        foreach (DataRow dr in ds1.Tables[0].Rows)
                                        {
                                            if (Convert.ToInt32(dr[0]) == -1)
                                            {
                                                ErrorMessage = "OSWRS details added for the entered date'";
                                            }
                                        }
                                    }

                                }
                                model = Get(model.OSWRId);
                            }
                           
                        }
                    }
                }
                Log4NetLogger.LogExit(_FileName, nameof(Save), Level.Info.ToString());
                return model;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public List<OSWRecordSheet> UserAreaCodeFetch(OSWRecordSheet searchObject)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(UserAreaCodeFetch), Level.Info.ToString());
                List<OSWRecordSheet> result = null;

                var pageIndex = searchObject.PageIndex;
                var pageSize = Convert.ToInt32(ConfigurationManager.AppSettings["FetchPopupPageSize"]);
                var dbAccessDAL = new DBAccessDAL();
                var obj = new OSWRecordSheet();
                var DataSetparameters = new Dictionary<string, DataTable>();
                var parameters = new Dictionary<string, string>();
                parameters.Add("@UserAreaCode", searchObject.UserAreaCode ?? "");
                parameters.Add("@pPageIndex", Convert.ToString(pageIndex));
                parameters.Add("@pPageSize", Convert.ToString(pageSize));
                parameters.Add("@pFacilityId", _UserSession.FacilityId.ToString());
                DataTable dt = dbAccessDAL.GetDataTable("sp_HWMS_OSWRecordSheetFetch", parameters, DataSetparameters);
                if (dt != null && dt.Rows.Count > 0)
                {
                    var totalRecords = Convert.ToInt32(dt.Rows[0]["TotalRecords"]);
                    var firstRecord = (pageIndex - 1) * pageSize + 1;
                    var lastRecord = (pageIndex - 1) * pageSize + dt.Rows.Count;
                    var lastPageIndex = totalRecords % pageSize == 0 ? totalRecords / pageSize : (totalRecords / pageSize) + 1;

                    result = (from n in dt.AsEnumerable()
                              select new OSWRecordSheet
                              {
                                  DeptAreaId = Convert.ToInt32(n["DeptAreaId"]),
                                  UserAreaCode = Convert.ToString(n["UserAreaCode"]),
                                  UserAreaName = Convert.ToString(n["UserAreaName"]),
                                  CollectionFrequency = Convert.ToString(n["CollectionFrequency"]),
                                  TotalRecords = totalRecords,
                                  FirstRecord = firstRecord,
                                  LastRecord = lastRecord,
                                  LastPageIndex = lastPageIndex
                              }).ToList();
                }
                Log4NetLogger.LogExit(_FileName, nameof(UserAreaCodeFetch), Level.Info.ToString());
                return result;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public GridFilterResult GetAll(SortPaginateFilter pageFilter)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(GetAll), Level.Info.ToString());
                GridFilterResult filterResult = null;

                var multipleOrderBy = pageFilter.SortColumn.Split(',');
                var strOrderBy = string.Empty;
                foreach (var order in multipleOrderBy)
                {
                    strOrderBy += order + " " + pageFilter.SortOrder + ",";
                }
                if (!string.IsNullOrEmpty(strOrderBy))
                {
                    strOrderBy = strOrderBy.TrimEnd(',');
                }

                strOrderBy = string.IsNullOrEmpty(strOrderBy) ? pageFilter.SortColumn + " " + pageFilter.SortOrder : strOrderBy;
                var strCondition = string.Empty;
                var QueryCondition = pageFilter.QueryWhereCondition;
                if (string.IsNullOrEmpty(QueryCondition))
                {
                    strCondition = "FacilityId = " + _UserSession.FacilityId.ToString();
                }
                else
                {
                    strCondition = QueryCondition + " AND FacilityId = " + _UserSession.FacilityId.ToString();
                }
                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "Sp_HWMS_OSWRecordSheet_GetAll";

                        cmd.Parameters.AddWithValue("@PageIndex", pageFilter.PageIndex);
                        cmd.Parameters.AddWithValue("@PageSize", pageFilter.PageSize);
                        cmd.Parameters.AddWithValue("@StrCondition", strCondition);
                        cmd.Parameters.AddWithValue("@StrSorting", strOrderBy);
                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                    }
                }
                if (ds.Tables.Count != 0 && ds.Tables[0].Rows.Count > 0)
                {
                    var totalRecords = Convert.ToInt32(ds.Tables[0].Rows[0]["TotalRecords"]);
                    var totalPages = (int)Math.Ceiling((float)totalRecords / (float)pageFilter.Rows);

                    var commonDAL = new CommonDAL();
                    var currentPageList = commonDAL.ToDynamicList(ds.Tables[0]);
                    filterResult = new GridFilterResult
                    {
                        TotalRecords = totalRecords,
                        TotalPages = totalPages,
                        RecordsList = currentPageList,
                        CurrentPage = pageFilter.Page
                    };
                }
                Log4NetLogger.LogExit(_FileName, nameof(GetAll), Level.Info.ToString());
                //return Blocks;
                return filterResult;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public OSWRecordSheet Get(int Id)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Get), Level.Info.ToString());

                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "Sp_HWMS_OSWRecordSheet_Get";
                        cmd.Parameters.AddWithValue("Id", Id);
                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                    }
                }
                OSWRecordSheet _oswrecordsheet = new OSWRecordSheet();

                if (ds.Tables[0].Rows.Count > 0)
                {
                    DataRow dr = ds.Tables[0].Rows[0];
                    _oswrecordsheet.OSWRId = Convert.ToInt32(dr["OSWRId"]);
                    _oswrecordsheet.OSWRSNo = dr["OSWRSNo"].ToString();
                    _oswrecordsheet.TotalPackage = Convert.ToInt32(dr["TotalPackage"].ToString());
                    _oswrecordsheet.WasteType = dr["WasteType"].ToString();
                    _oswrecordsheet.ConsignmentNo = dr["ConsignmentNo"].ToString();
                    _oswrecordsheet.UserAreaCode = dr["UserAreaCode"].ToString();
                    _oswrecordsheet.UserAreaName = dr["UserAreaName"].ToString();
                    _oswrecordsheet.Month = dr["Month"].ToString();
                    _oswrecordsheet.Year = Convert.ToInt32(dr["Year"].ToString());
                    _oswrecordsheet.CollectionFrequency = dr["CollectionFrequency"].ToString();
                    _oswrecordsheet.CollectionType = dr["CollectionType"].ToString();
                    _oswrecordsheet.Status = Convert.ToInt32(dr["Status"].ToString());
                }
                if (ds.Tables[1] != null)
                {
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        List<OSWRecordSheetSave> _oswrecordsheetlist = new List<OSWRecordSheetSave>();
                        foreach (DataRow dr in ds.Tables[1].Rows)
                        {
                            OSWRecordSheetSave Auto = new OSWRecordSheetSave();
                            Auto.OSWRecordId = Convert.ToInt32(dr["OSWRecordId"].ToString());
                            Auto.Date = Convert.ToDateTime(dr["Date"].ToString());
                            Auto.CollectionTime = dr["CollectionTime"].ToString();
                            Auto.CollectionStatus = dr["CollectionStatus"].ToString();
                            Auto.QC = dr["QC"].ToString();
                            _oswrecordsheetlist.Add(Auto);
                        }
                        _oswrecordsheet.OSWRecordSheetList = _oswrecordsheetlist;
                    }
                }
                if (ds.Tables[2].Rows.Count > 0)
                {
                    List<Attachment> _attachmentList = new List<Attachment>();

                    foreach (DataRow dr in ds.Tables[2].Rows)
                    {
                        Attachment obj = new Attachment();

                        obj.AttachmentId = Convert.ToInt32(dr["AttachmentId"]);
                        obj.FileType = dr["FileType"].ToString();
                        obj.FileName = dr["FileName"].ToString();
                        obj.AttachmentName = dr["AttachmentName"].ToString();
                        obj.FilePath = dr["FilePath"].ToString();
                        _attachmentList.Add(obj);

                    }
                    _oswrecordsheet.AttachmentList = _attachmentList;
                }
                Log4NetLogger.LogExit(_FileName, nameof(Get), Level.Info.ToString());
                return _oswrecordsheet;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }
    }
}
