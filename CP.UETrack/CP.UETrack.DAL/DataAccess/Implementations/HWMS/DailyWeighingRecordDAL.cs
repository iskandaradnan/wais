using CP.UETrack.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using CP.Framework.Common.Logging;
using CP.Framework.Common.ExceptionHandler.ExceptionWrappers;
using CP.UETrack.Models;
using CP.UETrack.Model.HWMS;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using UETrack.DAL;
using System.Dynamic;
using CP.UETrack.DAL.DataAccess.Implementation;
using CP.UETrack.DAL.DataAccess.Contracts.HWMS;
using CP.UETrack.Model.Common;

namespace CP.UETrack.DAL.DataAccess.Implementations.HWMS
{
    public class DailyWeighingRecordDAL: IDailyWeighingRecordDAL
    {
        private readonly string _FileName = nameof(BlockDAL);
        readonly UserDetailsModel _UserSession = new SessionHelper().UserSession();
        public DailyWeighingRecordDropDown Load()
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Load), Level.Info.ToString());
                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                DailyWeighingRecordDropDown dailyWeighingDropdownvalues = new DailyWeighingRecordDropDown();

                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "Sp_HWMS_DailyWeighingRecord_DropDown";
                        cmd.Parameters.Clear();
                        cmd.Parameters.AddWithValue("@pScreenName", "DailyWeighingRecord");
                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);

                        if (ds.Tables[0] != null)
                        {
                            dailyWeighingDropdownvalues.StatusLovs = dbAccessDAL.GetLovRecords(ds.Tables[0]);
                        }                       
                    }
                }

                Log4NetLogger.LogExit(_FileName, nameof(Load), Level.Info.ToString());
                return dailyWeighingDropdownvalues;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DailyWeighingRecord AutoGeneratedCode()
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(AutoGeneratedCode), Level.Info.ToString());
                DailyWeighingRecord dailyWeighingRecord = new DailyWeighingRecord();

                var ds = new DataSet();

                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "Sp_HWMS_DocumentNo_AutoGenerated";
                        cmd.Parameters.AddWithValue("@pScreenName", "DWR");
                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                    }
                }
                if (ds.Tables.Count != 0)
                {
                    dailyWeighingRecord = (from n in ds.Tables[0].AsEnumerable()
                                             select new DailyWeighingRecord
                                             {
                                                 DWRNo = Convert.ToString(n["DWRNo"])
                                             }).FirstOrDefault();
                }
                Log4NetLogger.LogExit(_FileName, nameof(AutoGeneratedCode), Level.Info.ToString());
                return dailyWeighingRecord;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DailyWeighingRecord Save(DailyWeighingRecord model, out string ErrorMessage)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Save), Level.Info.ToString());
                ErrorMessage = string.Empty;
                var spName = string.Empty;

                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "Sp_HWMS_DailyWeighingRecord";

                        cmd.Parameters.AddWithValue("@DWRId", model.DWRId);
                        cmd.Parameters.AddWithValue("@CustomerId", model.CustomerId);
                        cmd.Parameters.AddWithValue("@FacilityId", model.FacilityId);
                        cmd.Parameters.AddWithValue("@DWRNo", model.DWRNo);
                        cmd.Parameters.AddWithValue("@TotalWeight", model.TotalWeight);
                        cmd.Parameters.AddWithValue("@Date", model.Date);
                        cmd.Parameters.AddWithValue("@TotalBags", model.TotalBags);
                        cmd.Parameters.AddWithValue("@TotalNoofBins", model.TotalNoofBins);
                        cmd.Parameters.AddWithValue("@HospitalRepresentative", model.HospitalRepresentative);                       
                        cmd.Parameters.AddWithValue("@Status", model.Status);

                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                        if (ds.Tables.Count != 0)
                        {
                            cmd.Parameters.Clear();
                            model.DWRId = Convert.ToInt32(ds.Tables[0].Rows[0]["DWRId"]);

                            if (model.DWRId == -1)
                            {
                                ErrorMessage = "Date already exists";
                            }
                            else
                            {
                                var ds1 = new DataSet();
                                cmd.CommandText = "Sp_HWMS_DailyWeighingRecordBinNo_Save";

                                foreach (var use in model.dailyWeighingRecordsList)
                                {
                                    cmd.Parameters.Clear();
                                    cmd.Parameters.AddWithValue("@BinDetailsId", use.BinDetailsId);
                                    cmd.Parameters.AddWithValue("@DWRId", model.DWRId);
                                    cmd.Parameters.AddWithValue("@BinNo", use.BinNo);
                                    cmd.Parameters.AddWithValue("@Weight", use.Weight);
                                    cmd.Parameters.AddWithValue("@IsDeleted", use.isDeleted);
                                    da.SelectCommand = cmd;
                                    da.Fill(ds1);
                                }
                                model = Get(model.DWRId);
                            }
                        }
                    }
                }
                Log4NetLogger.LogExit(_FileName, nameof(Save), Level.Info.ToString());
                return model;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public GridFilterResult GetAll(SortPaginateFilter pageFilter)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(GetAll), Level.Info.ToString());
                GridFilterResult filterResult = null;

                var multipleOrderBy = pageFilter.SortColumn.Split(',');
                var strOrderBy = string.Empty;
                foreach (var order in multipleOrderBy)
                {
                    strOrderBy += order + " " + pageFilter.SortOrder + ",";
                }
                if (!string.IsNullOrEmpty(strOrderBy))
                {
                    strOrderBy = strOrderBy.TrimEnd(',');
                }

                strOrderBy = string.IsNullOrEmpty(strOrderBy) ? pageFilter.SortColumn + " " + pageFilter.SortOrder : strOrderBy;
                var strCondition = string.Empty;
                var QueryCondition = pageFilter.QueryWhereCondition;
                if (string.IsNullOrEmpty(QueryCondition))
                {
                    strCondition = "FacilityId = " + _UserSession.FacilityId.ToString();
                }
                else
                {
                    strCondition = QueryCondition + " AND FacilityId = " + _UserSession.FacilityId.ToString();
                }
                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "Sp_HWMS_DailyWeighingRecord_GetAll";

                        cmd.Parameters.AddWithValue("@PageIndex", pageFilter.PageIndex);
                        cmd.Parameters.AddWithValue("@PageSize", pageFilter.PageSize);
                        cmd.Parameters.AddWithValue("@StrCondition", strCondition);
                        cmd.Parameters.AddWithValue("@StrSorting", strOrderBy);
                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                    }
                }
                if (ds.Tables.Count != 0 && ds.Tables[0].Rows.Count > 0)
                {
                    var totalRecords = Convert.ToInt32(ds.Tables[0].Rows[0]["TotalRecords"]);
                    var totalPages = (int)Math.Ceiling((float)totalRecords / (float)pageFilter.Rows);

                    var commonDAL = new CommonDAL();
                    var currentPageList = commonDAL.ToDynamicList(ds.Tables[0]);
                    filterResult = new GridFilterResult
                    {
                        TotalRecords = totalRecords,
                        TotalPages = totalPages,
                        RecordsList = currentPageList,
                        CurrentPage = pageFilter.Page
                    };
                }
                Log4NetLogger.LogExit(_FileName, nameof(GetAll), Level.Info.ToString());
                //return Blocks;
                return filterResult;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public DailyWeighingRecord Get(int Id)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Get), Level.Info.ToString());

                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "SP_HWMS_DailyWeighingRecord_Get";
                        cmd.Parameters.AddWithValue("@DWRId", Id);
                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                    }
                }
                DailyWeighingRecord _dailyWeighing = new DailyWeighingRecord();

                if (ds.Tables[0].Rows.Count > 0)
                {
                    DataRow dr = ds.Tables[0].Rows[0];
                    _dailyWeighing.DWRId= Convert.ToInt32(dr["DWRId"]);
                    _dailyWeighing.DWRNo = dr["DWRNo"].ToString();
                    _dailyWeighing.TotalWeight =Convert.ToSingle(dr["TotalWeight"].ToString()); /*dr["TotalWeight"].ToString();*/                   
                    _dailyWeighing.Date = Convert.ToDateTime(dr["Date"].ToString());
                    _dailyWeighing.TotalBags = Convert.ToInt32(dr["TotalBags"].ToString());
                    _dailyWeighing.TotalNoofBins = Convert.ToInt32(dr["TotalNoofBins"].ToString());
                    _dailyWeighing.HospitalRepresentative = dr["HospitalRepresentative"].ToString();
                    _dailyWeighing.ConsignmentNo = dr["ConsignmentNo"].ToString();
                    _dailyWeighing.Status = dr["Status"].ToString();
                }
                if (ds.Tables[1] != null)
                {
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        List<DailyWeighingRecordTable> _dailyWeighingList = new List<DailyWeighingRecordTable>();
                        foreach (DataRow dr in ds.Tables[1].Rows)
                        {
                            DailyWeighingRecordTable Auto = new DailyWeighingRecordTable();

                            Auto.BinDetailsId = Convert.ToInt32(dr["BinDetailsId"].ToString());
                            Auto.BinNo = dr["BinNo"].ToString();
                            Auto.Weight = Convert.ToSingle(dr["Weight"].ToString()); /*dr["Weight"].ToString(); */
                            _dailyWeighingList.Add(Auto);
                        }
                        _dailyWeighing.dailyWeighingRecordsList = _dailyWeighingList;
                    }
                }
                if (ds.Tables[2].Rows.Count > 0)
                {
                    List<Attachment> _attachmentList = new List<Attachment>();

                    foreach (DataRow dr in ds.Tables[2].Rows)
                    {
                        Attachment obj = new Attachment();

                        obj.AttachmentId = Convert.ToInt32(dr["AttachmentId"]);
                        obj.FileType = dr["FileType"].ToString();
                        obj.FileName = dr["FileName"].ToString();
                        obj.AttachmentName = dr["AttachmentName"].ToString();
                        obj.FilePath = dr["FilePath"].ToString();
                        _attachmentList.Add(obj);

                    }
                    _dailyWeighing.AttachmentList = _attachmentList;
                }
                Log4NetLogger.LogExit(_FileName, nameof(Get), Level.Info.ToString());
                return _dailyWeighing;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public List<BinMasterTable> BinNoCodeFetch(BinMasterTable searchObject)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(BinNoCodeFetch), Level.Info.ToString());
                List<BinMasterTable> result = null;
                var pageIndex = searchObject.PageIndex;
                var pageSize = Convert.ToInt32(ConfigurationManager.AppSettings["FetchPopupPageSize"]);
                var dbAccessDAL = new DBAccessDAL();
                var obj = new BinMasterTable();
                var DataSetparameters = new Dictionary<string, DataTable>();
                var parameters = new Dictionary<string, string>();
                parameters.Add("@BinNo", searchObject.BinNo ?? "");
                parameters.Add("@pPageIndex", Convert.ToString(pageIndex));
                parameters.Add("@pPageSize", Convert.ToString(pageSize));
                parameters.Add("@pFacilityId", _UserSession.FacilityId.ToString());
                DataTable dt = dbAccessDAL.GetDataTable("Sp_HWMS_DailyWeighingRecord_BinNoCodeFetch", parameters, DataSetparameters);
                if (dt != null && dt.Rows.Count > 0)
                {
                    var totalRecords = Convert.ToInt32(dt.Rows[0]["TotalRecords"]);
                    var firstRecord = (pageIndex - 1) * pageSize + 1;
                    var lastRecord = (pageIndex - 1) * pageSize + dt.Rows.Count;
                    var lastPageIndex = totalRecords % pageSize == 0 ? totalRecords / pageSize : (totalRecords / pageSize) + 1;

                    result = (from n in dt.AsEnumerable()
                              select new BinMasterTable
                              {
                                  BinNoId = Convert.ToInt32(n["BinNoId"]),
                                  BinNo = Convert.ToString(n["BinNo"]),                               
                                  TotalRecords = totalRecords,
                                  FirstRecord = firstRecord,
                                  LastRecord = lastRecord,
                                  LastPageIndex = lastPageIndex
                              }).ToList();
                }
                Log4NetLogger.LogExit(_FileName, nameof(BinNoCodeFetch), Level.Info.ToString());
                return result;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }
    }
}
