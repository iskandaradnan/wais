using CP.UETrack.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using CP.Framework.Common.Logging;
using CP.Framework.Common.ExceptionHandler.ExceptionWrappers;
using CP.UETrack.Models;
using CP.UETrack.Model.HWMS;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using UETrack.DAL;
using System.Dynamic;
using CP.UETrack.DAL.DataAccess.Implementation;
using CP.UETrack.DAL.DataAccess.Contracts.HWMS;
using CP.UETrack.Model.Common;

namespace CP.UETrack.DAL.DataAccess.Implementations.HWMS
{
    public class CSWRecordSheetDAL : ICSWRecordSheetDAL
    {
        private readonly string _FileName = nameof(BlockDAL);
        readonly UserDetailsModel _UserSession = new SessionHelper().UserSession();

        public CSWRecordSheetDAL()
        {

        }
        public CSWRecordSheetDropdown Load()
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Load), Level.Info.ToString());
                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                CSWRecordSheetDropdown cswrecordsheetdropdown = new CSWRecordSheetDropdown();

                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "Sp_HWMS_CSWRecordSheet_Load";
                        cmd.Parameters.Clear();
                        cmd.Parameters.AddWithValue("@pScreenName", "CSWRecordSheet");
                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);

                        if (ds.Tables[0] != null)
                        {
                            cswrecordsheetdropdown.WasteTypeLovs = dbAccessDAL.GetLovRecords(ds.Tables[0]);
                        }
                        if (ds.Tables[1] != null)
                        {
                            cswrecordsheetdropdown.CSWRMonthLovs = dbAccessDAL.GetLovRecords(ds.Tables[1]);
                        }
                        if (ds.Tables[2] != null)
                        {
                            cswrecordsheetdropdown.CSWRYearLovs = dbAccessDAL.GetLovRecords(ds.Tables[2]);
                        }
                        if (ds.Tables[3] != null)
                        {
                            cswrecordsheetdropdown.CSWRCollectionTypeLovs = dbAccessDAL.GetLovRecords(ds.Tables[3]);
                        }
                        if (ds.Tables[4] != null)
                        {
                            cswrecordsheetdropdown.CSWRStatusLovs = dbAccessDAL.GetLovRecords(ds.Tables[4]);
                        }
                        if (ds.Tables[5] != null)
                        {
                            cswrecordsheetdropdown.CSWRCollectionStatusLovs = dbAccessDAL.GetLovRecords(ds.Tables[5]);
                        }
                        if (ds.Tables[6] != null)
                        {
                            cswrecordsheetdropdown.CSWRCollectionFrequencyLovs = dbAccessDAL.GetLovRecords(ds.Tables[6]);
                        }
                        if (ds.Tables[7] != null)
                        {
                            cswrecordsheetdropdown.QcLovs = dbAccessDAL.GetLovRecords(ds.Tables[7]);
                        }
                    }
                }
                Log4NetLogger.LogExit(_FileName, nameof(Load), Level.Info.ToString());
                return cswrecordsheetdropdown;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public CSWRecordSheet AutoGeneratedCode()
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(AutoGeneratedCode), Level.Info.ToString());
                CSWRecordSheet cswrecordsheet = new CSWRecordSheet();

                var ds = new DataSet();

                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "Sp_HWMS_DocumentNo_AutoGenerated";
                        cmd.Parameters.AddWithValue("@pScreenName", "CSWRS");
                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                    }
                }
                if (ds.Tables.Count != 0)
                {
                    cswrecordsheet = (from n in ds.Tables[0].AsEnumerable()
                                      select new CSWRecordSheet
                                      {
                                          DocumentNo = Convert.ToString(n["DocumentNo"])
                                      }).FirstOrDefault();
                }
                Log4NetLogger.LogExit(_FileName, nameof(AutoGeneratedCode), Level.Info.ToString());
                return cswrecordsheet;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public CSWRecordSheet Save(CSWRecordSheet model, out string ErrorMessage)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Save), Level.Info.ToString());
                ErrorMessage = string.Empty;
                var spName = string.Empty;

                var ds = new DataSet();
                var ds1 = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "sp_HWMS_CSWRecordSheet";

                        cmd.Parameters.AddWithValue("@CSWRecordSheetId", model.CSWRecordSheetId);
                        cmd.Parameters.AddWithValue("@CustomerId", model.CustomerId);
                        cmd.Parameters.AddWithValue("@FacilityId", model.FacilityId);
                        cmd.Parameters.AddWithValue("@DocumentNo", model.DocumentNo);
                        cmd.Parameters.AddWithValue("@RRWNo", model.RRWNo);
                        cmd.Parameters.AddWithValue("@WasteType", model.WasteType);
                        cmd.Parameters.AddWithValue("@WasteCode", model.WasteCode);
                        cmd.Parameters.AddWithValue("@UserAreaCode", model.UserAreaCode);
                        cmd.Parameters.AddWithValue("@UserAreaName", model.UserAreaName);
                        cmd.Parameters.AddWithValue("@Month", model.Month);
                        cmd.Parameters.AddWithValue("@Year", model.Year);
                        cmd.Parameters.AddWithValue("@CollectionType", model.CollectionType);
                        cmd.Parameters.AddWithValue("@Status", model.Status);
                        cmd.Parameters.AddWithValue("@TotalWeight", model.TotalWeight);

                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                        if (ds.Tables.Count != 0)
                        {
                            cmd.Parameters.Clear();
                            model.CSWRecordSheetId = Convert.ToInt32(ds.Tables[0].Rows[0]["CSWRecordSheetId"]);
                            if (model.CSWRecordSheetId == -1)
                            {
                                ErrorMessage = "WasteType  already exists for the same Month and Year";
                            }
                            else
                            {
                                cmd.CommandText = "Sp_HWMS_CSWRecordSheetCollectionDetail";

                                foreach (var use in model.CollectionDetailsList)
                                {
                                    cmd.Parameters.AddWithValue("@CSWId", use.CSWId);
                                    cmd.Parameters.AddWithValue("@CSWRecordSheetId", model.CSWRecordSheetId);
                                    cmd.Parameters.AddWithValue("@Date", use.Date);
                                    cmd.Parameters.AddWithValue("@NoofBin", use.NoofBin);
                                    cmd.Parameters.AddWithValue("@Weight", use.Weight);
                                    cmd.Parameters.AddWithValue("@CollectionFrequency", use.CollectionFrequency);
                                    cmd.Parameters.AddWithValue("@CollectionTime", use.CollectionTime);
                                    cmd.Parameters.AddWithValue("@CollectionStatus", use.CollectionStatus);
                                    cmd.Parameters.AddWithValue("@QC", use.QC);
                                    cmd.Parameters.AddWithValue("@IsDeleted", use.isDeleted);

                                    da.SelectCommand = cmd;
                                    da.Fill(ds1);
                                    cmd.Parameters.Clear();

                                    //if (ds1.Tables[0].Rows.Count > 0)
                                    //{
                                    //    foreach (DataRow dr in ds1.Tables[0].Rows)
                                    //    {
                                    //        if (Convert.ToInt32(dr[0]) == -1)
                                    //        {
                                    //            ErrorMessage = "Date already exists";
                                    //        }
                                    //    }
                                    //}
                                }
                                model = Get(model.CSWRecordSheetId);
                            }
                        }
                        
                    }
                }                
                Log4NetLogger.LogExit(_FileName, nameof(Save), Level.Info.ToString());
                return model;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }
                             
        public GridFilterResult GetAll(SortPaginateFilter pageFilter)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(GetAll), Level.Info.ToString());
                GridFilterResult filterResult = null;

                var multipleOrderBy = pageFilter.SortColumn.Split(',');
                var strOrderBy = string.Empty;
                foreach (var order in multipleOrderBy)
                {
                    strOrderBy += order + " " + pageFilter.SortOrder + ",";
                }
                if (!string.IsNullOrEmpty(strOrderBy))
                {
                    strOrderBy = strOrderBy.TrimEnd(',');
                }

                strOrderBy = string.IsNullOrEmpty(strOrderBy) ? pageFilter.SortColumn + " " + pageFilter.SortOrder : strOrderBy;
                var strCondition = string.Empty;
                var QueryCondition = pageFilter.QueryWhereCondition;
                if (string.IsNullOrEmpty(QueryCondition))
                {
                    strCondition = "FacilityId = " + _UserSession.FacilityId.ToString();
                }
                else
                {
                    strCondition = QueryCondition + " AND FacilityId = " + _UserSession.FacilityId.ToString();
                }
                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "sp_HWMS_CSWRecordSheet_GetAll";

                        cmd.Parameters.AddWithValue("@PageIndex", pageFilter.PageIndex);
                        cmd.Parameters.AddWithValue("@PageSize", pageFilter.PageSize);
                        cmd.Parameters.AddWithValue("@StrCondition", strCondition);
                        cmd.Parameters.AddWithValue("@StrSorting", strOrderBy);
                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                    }
                }
                if (ds.Tables.Count != 0 && ds.Tables[0].Rows.Count > 0)
                {
                    var totalRecords = Convert.ToInt32(ds.Tables[0].Rows[0]["TotalRecords"]);
                    var totalPages = (int)Math.Ceiling((float)totalRecords / (float)pageFilter.Rows);

                    var commonDAL = new CommonDAL();
                    var currentPageList = commonDAL.ToDynamicList(ds.Tables[0]);
                    filterResult = new GridFilterResult
                    {
                        TotalRecords = totalRecords,
                        TotalPages = totalPages,
                        RecordsList = currentPageList,
                        CurrentPage = pageFilter.Page
                    };
                }
                Log4NetLogger.LogExit(_FileName, nameof(GetAll), Level.Info.ToString());
                //return Blocks;
                return filterResult;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public CSWRecordSheet Get(int Id)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Get), Level.Info.ToString());
                CSWRecordSheet receptacles = new CSWRecordSheet();
                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "sp_HWMS_CSWRecordSheet_Get";
                        cmd.Parameters.AddWithValue("Id", Id);
                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                    }
                }
                CSWRecordSheet _cswrecordsheet = new CSWRecordSheet();
                if (ds.Tables[0].Rows.Count > 0)
                {
                    DataRow dr = ds.Tables[0].Rows[0];
                    _cswrecordsheet.CSWRecordSheetId = Convert.ToInt32(dr["CSWRecordSheetId"].ToString());
                    _cswrecordsheet.DocumentNo = dr["DocumentNo"].ToString();
                    _cswrecordsheet.RRWNo = dr["RRWNo"].ToString();
                    _cswrecordsheet.WasteType = dr["WasteType"].ToString();
                    _cswrecordsheet.WasteCode = dr["WasteCode"].ToString();
                    _cswrecordsheet.UserAreaCode = dr["UserAreaCode"].ToString();
                    _cswrecordsheet.UserAreaName = dr["UserAreaName"].ToString();
                    _cswrecordsheet.Month = dr["Month"].ToString();
                    _cswrecordsheet.Year =Convert.ToInt32(dr["Year"].ToString());
                    _cswrecordsheet.CollectionType = dr["CollectionType"].ToString();
                    _cswrecordsheet.Status =Convert.ToInt32(dr["Status"].ToString());
                    _cswrecordsheet.TotalWeight =Convert.ToSingle(dr["TotalWeight"].ToString());
                }
                if (ds.Tables[1] != null)
                {
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        List<CollectionDetails> _collectionDetails = new List<CollectionDetails>();
                        foreach (DataRow dr in ds.Tables[1].Rows)
                        {
                            CollectionDetails Auto = new CollectionDetails();

                            Auto.CSWId = Convert.ToInt32(dr["CSWId"].ToString());
                            Auto.Date = Convert.ToDateTime(dr["Date"].ToString());
                            Auto.NoofBin = Convert.ToInt32(dr["NoofBin"].ToString());
                            Auto.Weight = Convert.ToSingle(dr["Weight"].ToString());
                            Auto.CollectionFrequency = dr["CollectionFrequency"].ToString();
                            Auto.CollectionTime = dr["CollectionTime"].ToString();
                            Auto.CollectionStatus = dr["CollectionStatus"].ToString();
                            Auto.QC = dr["QC"].ToString();
                            _collectionDetails.Add(Auto);
                        }
                        _cswrecordsheet.CollectionDetailsList = _collectionDetails;
                    }
                }
                if (ds.Tables[2].Rows.Count > 0)
                {
                    List<Attachment> _attachmentList = new List<Attachment>();

                    foreach (DataRow dr in ds.Tables[2].Rows)
                    {
                        Attachment obj = new Attachment();

                        obj.AttachmentId = Convert.ToInt32(dr["AttachmentId"]);
                        obj.FileType = dr["FileType"].ToString();
                        obj.FileName = dr["FileName"].ToString();
                        obj.AttachmentName = dr["AttachmentName"].ToString();
                        obj.FilePath = dr["FilePath"].ToString();
                        _attachmentList.Add(obj);

                    }
                    _cswrecordsheet.AttachmentList = _attachmentList;
                }
                Log4NetLogger.LogExit(_FileName, nameof(Get), Level.Info.ToString());
                return _cswrecordsheet;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }       
        public List<CSWRecordSheet> AutoDisplaying()
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(AutoDisplaying), Level.Info.ToString());

                var ds = new DataSet();

                var dbAccessDAL = new DBAccessDAL();

                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "sp_HWMS_OSWRecordSheet_Display_UserAreaName";

                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                    }
                }
                List<CSWRecordSheet> _lstOSWRecord = new List<CSWRecordSheet>();
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    CSWRecordSheet Auto = new CSWRecordSheet();
                    Auto.UserAreaName = dr["UserAreaName"].ToString();

                    _lstOSWRecord.Add(Auto);
                }
                Log4NetLogger.LogExit(_FileName, nameof(AutoDisplaying), Level.Info.ToString());
                return _lstOSWRecord;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }        
        public CSWRecordSheet WasteCodeGet(string WasteType)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(WasteCodeGet), Level.Info.ToString());
                CSWRecordSheet _cswrecordsheet = new CSWRecordSheet();
                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "Sp_HWMS_CSWRecordSheet_WasteType";
                        cmd.Parameters.AddWithValue("@WasteType", WasteType);
                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                    }
                }
                List<CSWRecordSheet> _lstCSWRecord = new List<CSWRecordSheet>();

                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    CSWRecordSheet Waste = new CSWRecordSheet();
                    Waste.WasteCode = dr["WasteCode"].ToString();

                    _lstCSWRecord.Add(Waste);
                }
                _cswrecordsheet.WasteTypeList = _lstCSWRecord;

                Log4NetLogger.LogExit(_FileName, nameof(WasteCodeGet), Level.Info.ToString());
                return _cswrecordsheet;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }
    }
}
