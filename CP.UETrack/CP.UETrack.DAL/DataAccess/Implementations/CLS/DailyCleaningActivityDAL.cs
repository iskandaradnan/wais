using CP.Framework.Common.ExceptionHandler.ExceptionWrappers;
using CP.Framework.Common.Logging;
using CP.UETrack.DAL.DataAccess.Contracts.CLS;
using CP.UETrack.DAL.DataAccess.Implementation;
using CP.UETrack.Model;
using CP.UETrack.Model.CLS;
using CP.UETrack.Model.Common;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using UETrack.DAL;

namespace CP.UETrack.DAL.DataAccess.Implementations.CLS
{
   public class DailyCleaningActivityDAL: IDailyCleaningActivityDAL
    {
        private readonly string _FileName = nameof(BlockDAL);
        readonly UserDetailsModel _UserSession = new SessionHelper().UserSession();
        public DailyCleaningActivityDropDown Load() 
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Load), Level.Info.ToString());
                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();

                DailyCleaningActivityDropDown dailyCleaningActivityDropdown = new DailyCleaningActivityDropDown();

                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        var da = new SqlDataAdapter();
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "Sp_CLS_DailyCleaningActivity_Dropdown";
                        cmd.Parameters.Clear();
                        cmd.Parameters.AddWithValue("@pScreenName", "DailyCleaningActivity");

                        da.SelectCommand = cmd;
                        da.Fill(ds);
                       
                        if (ds.Tables[0] != null)
                        {
                            dailyCleaningActivityDropdown.StatusLov = dbAccessDAL.GetLovRecords(ds.Tables[0]);
                        }

                    }
                }

                Log4NetLogger.LogExit(_FileName, nameof(Load), Level.Info.ToString());
                return dailyCleaningActivityDropdown;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DailyCleaningActivity AutoGeneratedCode()
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(AutoGeneratedCode), Level.Info.ToString());
                DailyCleaningActivity dailyCleaningActivity = new DailyCleaningActivity();

                var ds = new DataSet();

                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "sp_CLS_DailyCleaningActivityAutoGeneratedCode";

                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                    }
                }

                if (ds.Tables.Count != 0)
                {
                    dailyCleaningActivity = (from n in ds.Tables[0].AsEnumerable()
                                          select new DailyCleaningActivity
                                          {
                                              DocumentNo = Convert.ToString(n["DocumentNo"])
                                          }).FirstOrDefault();
                }



                Log4NetLogger.LogExit(_FileName, nameof(AutoGeneratedCode), Level.Info.ToString());
                return dailyCleaningActivity;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public DailyCleaningActivity DocFetch(DailyCleaningActivity daily)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(DocFetch), Level.Info.ToString());
            try
            {
                var dbAccessDAL = new DBAccessDAL();
                DeptAreaDetails entity = new DeptAreaDetails();
                var DataSetparameters = new Dictionary<string, DataTable>();
                var parameters = new Dictionary<string, string>();

                parameters.Add("@DocumentNo", daily.DocumentNo);

                DataSet dt = dbAccessDAL.GetDataSet("SP_CLS_DailyCleaningActivityFetch", parameters, DataSetparameters);
                if (dt != null && dt.Tables.Count > 0)
                {
                    daily.fetchList = (from n in dt.Tables[0].AsEnumerable()
                                                    select new DailyCleaningActivityTable
                                                    {
                                                        UserAreaCode = n.Field<string>("UserAreaCode"),
                                                        Status = n.Field<Int32>("Status"),
                                                        A1 = n.Field<Int32>("DustMop"),
                                                        A2 = n.Field<Int32>("DampMop"),
                                                        A3 = n.Field<Int32>("Vacuum"),
                                                        A4 = n.Field<Int32>("Washing"),
                                                        A5 = n.Field<Int32>("Sweeping"),
                                                        B1 = n.Field<Int32>("Wiping"),
                                                        C1 = n.Field<Int32>("Washing"),
                                                        D1 = n.Field<Int32>("PaperHandTowel"),
                                                        D2 = n.Field<Int32>("Toilet"),
                                                        D3 = n.Field<Int32>("HandSoap"),
                                                        D4 = n.Field<Int32>("Deodorisers"),
                                                        E1 = n.Field<Int32>("DomesticWasteCollection"),                                                       
                                                    }).ToList();
                }
                return daily;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DailyCleaningActivity Save(DailyCleaningActivity model, out string ErrorMessage)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Save), Level.Info.ToString());
                ErrorMessage = string.Empty;
                var spName = string.Empty;

                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "sp_CLS_DailyCleaningActivity";

                        cmd.Parameters.AddWithValue("@DailyActivityId", model.DailyActivityId);
                        cmd.Parameters.AddWithValue("@CustomerId", model.CustomerId);
                        cmd.Parameters.AddWithValue("@FacilityId", model.FacilityId);
                        cmd.Parameters.AddWithValue("@DocumentNo", model.DocumentNo);
                        cmd.Parameters.AddWithValue("@Date", model.Date);
                        cmd.Parameters.AddWithValue("@TotalDone", model.TotalDone);
                        cmd.Parameters.AddWithValue("@TotalNotDone", model.TotalNotDone);

                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                        if (ds.Tables.Count != 0)
                        {
                            cmd.Parameters.Clear();

                            model.DailyActivityId = Convert.ToInt32(ds.Tables[0].Rows[0]["DailyActivityId"]);

                            if (model.DailyActivityId == -1)
                            {
                                var DocumentNo = ds.Tables[0].Rows[0]["DailyActivityId"].ToString();

                                ErrorMessage = "Daily Cleaning Activity for date " + model.Date.ToString("dd-MMM-yyyy") + " is already saved for the Document No: " + DocumentNo;
                            }
                            else
                            {
                                var ds1 = new DataSet();
                                cmd.CommandText = "Sp_CLS_DailyCleaningActivityGridviewfields";

                                foreach (var use in model.fetchList)
                                {
                                    cmd.Parameters.AddWithValue("@DailyActivityId", model.DailyActivityId);
                                    cmd.Parameters.AddWithValue("@UserAreaCode", use.UserAreaCode);
                                    cmd.Parameters.AddWithValue("@Status", use.Status);
                                    cmd.Parameters.AddWithValue("@A1", use.A1);
                                    cmd.Parameters.AddWithValue("@A2", use.A2);
                                    cmd.Parameters.AddWithValue("@A3", use.A3);
                                    cmd.Parameters.AddWithValue("@A4", use.A4);
                                    cmd.Parameters.AddWithValue("@A5", use.A5);
                                    cmd.Parameters.AddWithValue("@B1", use.B1);
                                    cmd.Parameters.AddWithValue("@C1", use.C1);
                                    cmd.Parameters.AddWithValue("@D1", use.D1);
                                    cmd.Parameters.AddWithValue("@D2", use.D2);
                                    cmd.Parameters.AddWithValue("@D3", use.D3);
                                    cmd.Parameters.AddWithValue("@D4", use.D4);
                                    cmd.Parameters.AddWithValue("@E1", use.E1);

                                    da.SelectCommand = cmd;
                                    da.Fill(ds1);
                                    cmd.Parameters.Clear();
                                }
                            }
                        }
                    }
                }
                Log4NetLogger.LogExit(_FileName, nameof(Save), Level.Info.ToString());
                return model;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public GridFilterResult GetAll(SortPaginateFilter pageFilter)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(GetAll), Level.Info.ToString());
                GridFilterResult filterResult = null;

                var multipleOrderBy = pageFilter.SortColumn.Split(',');
                var strOrderBy = string.Empty;
                foreach (var order in multipleOrderBy)
                {
                    strOrderBy += order + " " + pageFilter.SortOrder + ",";
                }
                if (!string.IsNullOrEmpty(strOrderBy))
                {
                    strOrderBy = strOrderBy.TrimEnd(',');
                }

                strOrderBy = string.IsNullOrEmpty(strOrderBy) ? pageFilter.SortColumn + " " + pageFilter.SortOrder : strOrderBy;
                var strCondition = string.Empty;
                var QueryCondition = pageFilter.QueryWhereCondition;
                if (string.IsNullOrEmpty(QueryCondition))
                {
                    strCondition = "FacilityId = " + _UserSession.FacilityId.ToString();
                }
                else
                {
                    strCondition = QueryCondition + " AND FacilityId = " + _UserSession.FacilityId.ToString();
                }
                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "SP_CLS_DailyCleaningActivity_GetlAll";

                        cmd.Parameters.AddWithValue("@PageIndex", pageFilter.PageIndex);
                        cmd.Parameters.AddWithValue("@PageSize", pageFilter.PageSize);
                        cmd.Parameters.AddWithValue("@StrCondition", strCondition);
                        cmd.Parameters.AddWithValue("@StrSorting", strOrderBy);

                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                    }
                }
                if (ds.Tables.Count != 0 && ds.Tables[0].Rows.Count > 0)
                {
                    var totalRecords = Convert.ToInt32(ds.Tables[0].Rows[0]["TotalRecords"]);
                    var totalPages = (int)Math.Ceiling((float)totalRecords / (float)pageFilter.Rows);

                    var commonDAL = new CommonDAL();
                    var currentPageList = commonDAL.ToDynamicList(ds.Tables[0]);
                    filterResult = new GridFilterResult
                    {
                        TotalRecords = totalRecords,
                        TotalPages = totalPages,
                        RecordsList = currentPageList,
                        CurrentPage = pageFilter.Page
                    };
                }
                Log4NetLogger.LogExit(_FileName, nameof(GetAll), Level.Info.ToString());
                //return Blocks;
                return filterResult;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public DailyCleaningActivity Get(int Id)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Get), Level.Info.ToString());
                DailyCleaningActivity daily = null;
                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "SP_CLS_DailyCleaningActivity_Get";
                        cmd.Parameters.AddWithValue("Id", Id);
                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                    }
                }
                DailyCleaningActivity _DailyCleaningActivity = new DailyCleaningActivity();


                if (ds.Tables[0].Rows.Count > 0)
                {
                    DataRow dr = ds.Tables[0].Rows[0];

                    _DailyCleaningActivity.DocumentNo = dr["DocumentNo"].ToString();
                    _DailyCleaningActivity.Date = Convert.ToDateTime(dr["Date"]);
                    _DailyCleaningActivity.TotalDone = Convert.ToInt32(dr["TotalDone"].ToString());
                    _DailyCleaningActivity.TotalNotDone = Convert.ToInt32(dr["TotalNotDone"].ToString());
                }
                if (ds.Tables[1] != null)
                {
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        List<DailyCleaningActivityTable> _dailyCleaningActivityList = new List<DailyCleaningActivityTable>();
                        foreach (DataRow dr in ds.Tables[1].Rows)
                        {
                            DailyCleaningActivityTable Auto = new DailyCleaningActivityTable();
                            Auto.UserAreaCode = dr["UserAreaCode"].ToString();
                            Auto.Status = Convert.ToInt32(dr["Status"].ToString());
                            Auto.A1 = Convert.ToInt32(dr["A1"].ToString());
                            Auto.A2 = Convert.ToInt32(dr["A2"].ToString());
                            Auto.A3 = Convert.ToInt32(dr["A3"].ToString());
                            Auto.A4 = Convert.ToInt32(dr["A4"].ToString());
                            Auto.A5 = Convert.ToInt32(dr["A5"].ToString());
                            Auto.B1 = Convert.ToInt32(dr["B1"].ToString());
                            Auto.C1 = Convert.ToInt32(dr["C1"].ToString());
                            Auto.D1 = Convert.ToInt32(dr["D1"].ToString());
                            Auto.D2 = Convert.ToInt32(dr["D2"].ToString());
                            Auto.D3 = Convert.ToInt32(dr["D3"].ToString());
                            Auto.D4 = Convert.ToInt32(dr["D4"].ToString());
                            Auto.E1 = Convert.ToInt32(dr["E1"].ToString());
                            _dailyCleaningActivityList.Add(Auto);
                        }
                        _DailyCleaningActivity.fetchList = _dailyCleaningActivityList;
                    }
                }

                if (ds.Tables[2].Rows.Count > 0)
                {
                    List<Attachment> _attachmentList = new List<Attachment>();

                    foreach (DataRow dr in ds.Tables[2].Rows)
                    {
                        Attachment obj = new Attachment();

                        obj.AttachmentId = Convert.ToInt32(dr["AttachmentId"]);
                        obj.FileType = dr["FileType"].ToString();
                        obj.FileName = dr["FileName"].ToString();
                        obj.AttachmentName = dr["AttachmentName"].ToString();
                        obj.FilePath = dr["FilePath"].ToString();
                        _attachmentList.Add(obj);

                    }
                    _DailyCleaningActivity.AttachmentList = _attachmentList;
                }

                Log4NetLogger.LogExit(_FileName, nameof(Get), Level.Info.ToString());
                return _DailyCleaningActivity;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }
    }
}
