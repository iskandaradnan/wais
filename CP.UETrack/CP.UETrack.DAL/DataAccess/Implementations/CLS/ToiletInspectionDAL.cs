using CP.Framework.Common.ExceptionHandler.ExceptionWrappers;
using CP.Framework.Common.Logging;
using CP.UETrack.DAL.DataAccess.Contracts.CLS;
using CP.UETrack.DAL.DataAccess.Implementation;
using CP.UETrack.Model;
using CP.UETrack.Model.CLS;
using CP.UETrack.Model.Common;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UETrack.DAL;

namespace CP.UETrack.DAL.DataAccess.Implementations.CLS
{
    public class ToiletInspectionDAL : IToiletInspectionDAL
    {
        private readonly string _FileName = nameof(BlockDAL);
        readonly UserDetailsModel _UserSession = new SessionHelper().UserSession();
        public ToiletInspectionDAL()
        {

        }

        public ToiletInspectionDropDown Load()
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Load), Level.Info.ToString());
                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();

                ToiletInspectionDropDown toiletInspectionDropDown = new ToiletInspectionDropDown();

                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        var da = new SqlDataAdapter();
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "Sp_CLS_ToiletInspectionTxn_Dropdown";
                        cmd.Parameters.Clear();
                        cmd.Parameters.AddWithValue("@pScreenName", "ToiletInspection");

                        da.SelectCommand = cmd;
                        da.Fill(ds);
                        
                        if (ds.Tables[0] != null)
                        {
                            toiletInspectionDropDown.StatusLov = dbAccessDAL.GetLovRecords(ds.Tables[0]);
                        }
                    }
                }

                Log4NetLogger.LogExit(_FileName, nameof(Load), Level.Info.ToString());
                return toiletInspectionDropDown;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public ToiletInspection AutoGeneratedCode()
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(AutoGeneratedCode), Level.Info.ToString());
                ToiletInspection toiletInspection = new ToiletInspection();

                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "sp_CLS_ToiletInspectionTxn_AutoGenerated";

                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                    }
                }
                if (ds.Tables.Count != 0)
                {
                    toiletInspection = (from n in ds.Tables[0].AsEnumerable()
                                        select new ToiletInspection
                                        {
                                            DocumentNo = Convert.ToString(n["DocumentNo"])
                                        }).FirstOrDefault();
                }
                Log4NetLogger.LogExit(_FileName, nameof(AutoGeneratedCode), Level.Info.ToString());
                return toiletInspection;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public ToiletInspection ToiletFetch(ToiletInspection toiletInserpection)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(ToiletFetch), Level.Info.ToString());
            try
            {
                var dbAccessDAL = new DBAccessDAL();
                var inspection = new ToiletInspection();
                var DataSetparameters = new Dictionary<string, DataTable>();
                var parameters = new Dictionary<string, string>();

                parameters.Add("@pToiletInspectionId", toiletInserpection.ToiletInspectionId.ToString());

                DataSet dt = dbAccessDAL.GetDataSet("Sp_CLS_ToiletInspectionTxn_Fetch", parameters, DataSetparameters);
                if (dt != null && dt.Tables.Count > 0)
                {
                    inspection.locationCodeDetailsList = (from n in dt.Tables[0].AsEnumerable()
                                                          select new LocationCodeDetails
                                                          {
                                                              LocationCode = n.Field<string>("LocationCode"),
                                                              Status = n.Field<Int32>("Status"),                                                              
                                                              Mirror = n.Field<Int32>("Mirror"),
                                                              Floor = n.Field<Int32>("Floor"),
                                                              Wall = n.Field<Int32>("Wall"),
                                                              Urinal = n.Field<Int32>("Urinal"),
                                                              Bowl = n.Field<Int32>("Bowl"),
                                                              Basin = n.Field<Int32>("Basin"),
                                                              ToiletRoll = n.Field<Int32>("ToiletRoll"),
                                                              SoapDispenser = n.Field<Int32>("SoapDispenser"),
                                                              AutoAirFreshner = n.Field<Int32>("AutoAirFreshner"),
                                                              Waste = n.Field<Int32>("Waste"),
                                                      }).ToList();
                }
                return inspection;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public ToiletInspection Save(ToiletInspection toilet, out string ErrorMessage)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Save), Level.Info.ToString());
                ErrorMessage = string.Empty;
                var spName = string.Empty;
                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "Sp_CLS_ToiletInspectionTxn_Save";
                        cmd.Parameters.AddWithValue("@ToiletInspectionId", toilet.ToiletInspectionId);
                        cmd.Parameters.AddWithValue("@pCustomerId", toilet.CustomerId);
                        cmd.Parameters.AddWithValue("@pFacilityId", toilet.FacilityId);
                        cmd.Parameters.AddWithValue("@pDocumentNo", toilet.DocumentNo);
                        cmd.Parameters.AddWithValue("@pDate", toilet.Date);
                        cmd.Parameters.AddWithValue("@pTotalDone", toilet.TotalDone);
                        cmd.Parameters.AddWithValue("@pTotalNotDone", toilet.TotalNotDone);
                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                        if (ds.Tables.Count != 0)
                        {
                            cmd.Parameters.Clear();

                            if(Convert.ToInt32(ds.Tables[0].Rows[0]["ToiletInspectionId"]) == -1)
                            {
                                ErrorMessage = "Toilet Inspection already saved for the date " + toilet.Date.ToString("dd-MMM-yyyy");
                            }
                            else
                            {
                                toilet.ToiletInspectionId = Convert.ToInt32(ds.Tables[0].Rows[0]["ToiletInspectionId"]);
                                var ds1 = new DataSet();
                                cmd.CommandText = "Sp_CLS_ToiletInspectionTxn_LocSave";

                                foreach (var toiletobj in toilet.locationCodeDetailsList)
                                {
                                    cmd.Parameters.AddWithValue("@pToiletInspectionId", toilet.ToiletInspectionId);
                                    cmd.Parameters.AddWithValue("@pLocationCode", toiletobj.LocationCode);
                                    cmd.Parameters.AddWithValue("@pStatus", toiletobj.Status);
                                    cmd.Parameters.AddWithValue("@pMirror", toiletobj.Mirror);
                                    cmd.Parameters.AddWithValue("@pFloor", toiletobj.Floor);
                                    cmd.Parameters.AddWithValue("@pWall", toiletobj.Wall);
                                    cmd.Parameters.AddWithValue("@pUrinal", toiletobj.Urinal);
                                    cmd.Parameters.AddWithValue("@pBowl", toiletobj.Bowl);
                                    cmd.Parameters.AddWithValue("@pBasin", toiletobj.Basin);
                                    cmd.Parameters.AddWithValue("@pToiletRoll", toiletobj.ToiletRoll);
                                    cmd.Parameters.AddWithValue("@pSoapDispenser", toiletobj.SoapDispenser);
                                    cmd.Parameters.AddWithValue("@pAutoAirFreshner", toiletobj.AutoAirFreshner);
                                    cmd.Parameters.AddWithValue("@pWaste", toiletobj.Waste);

                                    da.SelectCommand = cmd;
                                    da.Fill(ds1);
                                    cmd.Parameters.Clear();
                                }
                            }

                          
                        }
                    }
                }
                Log4NetLogger.LogExit(_FileName, nameof(Save), Level.Info.ToString());
                return toilet;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public GridFilterResult GetAll(SortPaginateFilter pageFilter)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(GetAll), Level.Info.ToString());
                GridFilterResult filterResult = null;

                var multipleOrderBy = pageFilter.SortColumn.Split(',');
                var strOrderBy = string.Empty;
                foreach (var order in multipleOrderBy)
                {
                    strOrderBy += order + " " + pageFilter.SortOrder + ",";
                }
                if (!string.IsNullOrEmpty(strOrderBy))
                {
                    strOrderBy = strOrderBy.TrimEnd(',');
                }

                strOrderBy = string.IsNullOrEmpty(strOrderBy) ? pageFilter.SortColumn + " " + pageFilter.SortOrder : strOrderBy;
                var strCondition = string.Empty;
                var QueryCondition = pageFilter.QueryWhereCondition;
                if (string.IsNullOrEmpty(QueryCondition))
                {
                    strCondition = "FacilityId = " + _UserSession.FacilityId.ToString();
                }
                else
                {
                    strCondition = QueryCondition + " AND FacilityId = " + _UserSession.FacilityId.ToString();
                }
                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "SP_CLS_ToiletInspectionTxn_GetAll";

                        cmd.Parameters.AddWithValue("@PageIndex", pageFilter.PageIndex);
                        cmd.Parameters.AddWithValue("@PageSize", pageFilter.PageSize);
                        cmd.Parameters.AddWithValue("@StrCondition", strCondition);
                        cmd.Parameters.AddWithValue("@StrSorting", strOrderBy);

                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                    }
                }
                if (ds.Tables.Count != 0 && ds.Tables[0].Rows.Count > 0)
                {
                    var totalRecords = Convert.ToInt32(ds.Tables[0].Rows[0]["TotalRecords"]);
                    var totalPages = (int)Math.Ceiling((float)totalRecords / (float)pageFilter.Rows);

                    var commonDAL = new CommonDAL();
                    var currentPageList = commonDAL.ToDynamicList(ds.Tables[0]);
                    filterResult = new GridFilterResult
                    {
                        TotalRecords = totalRecords,
                        TotalPages = totalPages,
                        RecordsList = currentPageList,
                        CurrentPage = pageFilter.Page
                    };
                }
                Log4NetLogger.LogExit(_FileName, nameof(GetAll), Level.Info.ToString());
                return filterResult;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public ToiletInspection Get(int Id)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Get), Level.Info.ToString());
                ToiletInspection _inspection = null;

                var ds = new DataSet();
                var dbAccessDAL = new DBAccessDAL();
                using (SqlConnection con = new SqlConnection(dbAccessDAL.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        cmd.Connection = con;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "Sp_CLS_ToiletInspectionTxn_Get";
                        cmd.Parameters.AddWithValue("Id", Id);
                        var da = new SqlDataAdapter();
                        da.SelectCommand = cmd;
                        da.Fill(ds);
                    }
                }
                ToiletInspection _toiletInspection = new ToiletInspection();
                if (ds.Tables[0].Rows.Count > 0)
                {
                    DataRow dr = ds.Tables[0].Rows[0];

                    _toiletInspection.DocumentNo = dr["DocumentNo"].ToString();
                    _toiletInspection.Date = Convert.ToDateTime(dr["Date"].ToString());
                    _toiletInspection.TotalDone = Convert.ToInt32(dr["TotalDone"].ToString());
                    _toiletInspection.TotalNotDone = Convert.ToInt32(dr["TotalNotDone"].ToString());
                }
                if (ds.Tables[1] != null)
                {
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        List<LocationCodeDetails> _locationCodeDetailsList = new List<LocationCodeDetails>();
                        foreach (DataRow dr in ds.Tables[1].Rows)
                        {
                            LocationCodeDetails Auto = new LocationCodeDetails();
                            Auto.LocationCode = dr["LocationCode"].ToString();
                            Auto.Status = Convert.ToInt32(dr["Status"]);
                            Auto.Mirror = Convert.ToInt32(dr["Mirror"]);
                            Auto.Floor = Convert.ToInt32(dr["Floor"]);
                            Auto.Wall = Convert.ToInt32(dr["Wall"]);
                            Auto.Urinal  = Convert.ToInt32(dr["Urinal"]);
                            Auto.Bowl = Convert.ToInt32(dr["Bowl"]);
                            Auto.Basin = Convert.ToInt32(dr["Basin"]);
                            Auto.ToiletRoll = Convert.ToInt32(dr["ToiletRoll"]);
                            Auto.SoapDispenser = Convert.ToInt32(dr["SoapDispenser"]);
                            Auto.AutoAirFreshner = Convert.ToInt32(dr["AutoAirFreshner"]);
                            Auto.Waste = Convert.ToInt32(dr["Waste"]);

                            _locationCodeDetailsList.Add(Auto);
                        }
                        _toiletInspection.locationCodeDetailsList = _locationCodeDetailsList;
                    }
                }

                if (ds.Tables[2].Rows.Count > 0)
                {
                    List<Attachment> _attachmentList = new List<Attachment>();

                    foreach (DataRow dr in ds.Tables[2].Rows)
                    {
                        Attachment obj = new Attachment();

                        obj.AttachmentId = Convert.ToInt32(dr["AttachmentId"]);
                        obj.FileType = dr["FileType"].ToString();
                        obj.FileName = dr["FileName"].ToString();
                        obj.AttachmentName = dr["AttachmentName"].ToString();
                        obj.FilePath = dr["FilePath"].ToString();
                        _attachmentList.Add(obj);

                    }
                    _toiletInspection.AttachmentList = _attachmentList;
                }

                Log4NetLogger.LogExit(_FileName, nameof(Get), Level.Info.ToString());
                return _toiletInspection;
            }
            catch (DALException dalex)
            {
                throw new DALException(dalex);
            }
            catch (Exception)
            {
                throw;
            }
        }
    }
}
