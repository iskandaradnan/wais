
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UETrack.Application.Web
{
    using CP.Framework.Common.Logging;
    using CP.UETrack.Application.Web.API;
    using CP.UETrack.Application.Web.Filter;
    using CP.UETrack.Model;
    using CP.UETrack.Model.BEMS;
    using CP.UETrack.Model.FetchModels;
    using Helpers;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System.Web.Http;

    [RoutePrefix("api/Search")]
    [WebApiAuthentication]
    public class SearchAPIController : BaseApiController
    {
        private readonly string _FileName = nameof(SearchAPIController);
        [HttpPost(nameof(PopupSearch))]
        public async Task<HttpResponseMessage> PopupSearch(HttpRequestMessage request, [FromBody] UMStaffSearch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(PopupSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/PopupSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(PopupSearch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(TypeCodeSearch))]
        public async Task<HttpResponseMessage> TypeCodeSearch(HttpRequestMessage request, [FromBody] TypeCodeSearch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(TypeCodeSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/TypeCodeSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(TypeCodeSearch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(LocationCodeSearch))]
        public async Task<HttpResponseMessage> LocationCodeSearch(HttpRequestMessage request, [FromBody] UserLocationCodeSearch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(LocationCodeSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/LocationCodeSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(LocationCodeSearch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(ManufacturerSearch))]
        public async Task<HttpResponseMessage> ManufacturerSearch(HttpRequestMessage request, [FromBody] ManufacturerSearch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(ManufacturerSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/ManufacturerSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(ManufacturerSearch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(ModelSearch))]
        public async Task<HttpResponseMessage> ModelSearch(HttpRequestMessage request, [FromBody] CP.UETrack.Model.ModelSearch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(ModelSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/ModelSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(ModelSearch), Level.Info.ToString());
            return result;
        }

        [HttpPost(nameof(TaskCodeSearch))]
        public async Task<HttpResponseMessage> TaskCodeSearch(HttpRequestMessage request, [FromBody] EngAssetTypeCodeStandardTasksFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(TaskCodeSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/TaskCodeSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(TaskCodeSearch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(AssetPreRegistrationNoSearch))]
        public async Task<HttpResponseMessage> AssetPreRegistrationNoSearch(HttpRequestMessage request, [FromBody] AssetPreRegistrationNoSearch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(AssetPreRegistrationNoSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/AssetPreRegistrationNoSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(AssetPreRegistrationNoSearch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(WarrantyManagementSearch))]
        public async Task<HttpResponseMessage> WarrantyManagementSearch(HttpRequestMessage request, [FromBody] WarrantyManagementSearch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(WarrantyManagementSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/WarrantyManagementSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(WarrantyManagementSearch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(UserAreaSearch))]
        public async Task<HttpResponseMessage> UserAreaSearch(HttpRequestMessage request, [FromBody] UserAreaFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(UserAreaSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/UserAreaSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(UserAreaSearch), Level.Info.ToString());
            return result;
        }
      
        [HttpPost(nameof(StockAdjustmentFetchModel))]
        public async Task<HttpResponseMessage> StockAdjustmentFetchModel(HttpRequestMessage request, [FromBody] StockAdjustmentFetchModel SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(StockAdjustmentFetchModel), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/StockAdjustmentFetchModel", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(StockAdjustmentFetchModel), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(ParentAssetNoSearch))]
        public async Task<HttpResponseMessage> ParentAssetNoSearch(HttpRequestMessage request, [FromBody] ParentAssetNoSearch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(ParentAssetNoSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/ParentAssetNoSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(ParentAssetNoSearch), Level.Info.ToString());
            return result;
        }

        [HttpPost(nameof(SearchforContractorcode))]
        public async Task<HttpResponseMessage> SearchforContractorcode(HttpRequestMessage request, [FromBody] AssetRegisterWarrantyProviderGrid SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(SearchforContractorcode), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/SearchforContractorcode", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(SearchforContractorcode), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(AssetClassificationCodeSearch))]
        public async Task<HttpResponseMessage> AssetClassificationCodeSearch(HttpRequestMessage request, [FromBody] AssetClassificationFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(AssetClassificationCodeSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/AssetClassificationCodeSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(AssetClassificationCodeSearch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(CompanyStaffSearch))]
        public async Task<HttpResponseMessage> CompanyStaffSearch(HttpRequestMessage request, [FromBody] CompanyStaffFetchModel SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(CompanyStaffSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/CompanyStaffSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(CompanyStaffSearch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(FacilityStaffSearch))]
        public async Task<HttpResponseMessage> FacilityStaffSearch(HttpRequestMessage request, [FromBody] FacilityStaffFetchModel SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(FacilityStaffSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/FacilityStaffSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(FacilityStaffSearch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(ItemCodeSearch))]
        public async Task<HttpResponseMessage> ItemCodeSearch(HttpRequestMessage request, [FromBody] ItemCodeFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(ItemCodeSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/ItemCodeSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(ItemCodeSearch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(LevelCodeSearch))]
        public async Task<HttpResponseMessage> LevelCodeSearch(HttpRequestMessage request, [FromBody] LevelFetchModel SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(ItemCodeSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/LevelCodeSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(ItemCodeSearch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(BERAssetSearch))]
        public async Task<HttpResponseMessage> BERAssetSearch(HttpRequestMessage request, [FromBody] BERAssetNoFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(BERAssetNoFetch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/BERAssetSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(BERAssetNoFetch), Level.Info.ToString());
            return result;
        }

        [HttpPost(nameof(BERRejectedNoSearch))]
        public async Task<HttpResponseMessage> BERRejectedNoSearch(HttpRequestMessage request, [FromBody] BERRejectedNoFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(BERRejectedNoSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/BERRejectedNoSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(BERRejectedNoSearch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(AssetQRCodePrintFetchModel))]
        public async Task<HttpResponseMessage> AssetQRCodePrintFetchModel(HttpRequestMessage request, [FromBody] AssetQRCodePrintFetchModel SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(AssetQRCodePrintFetchModel), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/AssetQRCodePrintFetchModel", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(AssetQRCodePrintFetchModel), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(UserLocationQRCodePrintingFetchModel))]
        public async Task<HttpResponseMessage> UserLocationQRCodePrintingFetchModel(HttpRequestMessage request, [FromBody] UserLocationQRCodePrintingFetchModel SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(UserLocationQRCodePrintingFetchModel), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/UserLocationQRCodePrintingFetchModel", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(UserLocationQRCodePrintingFetchModel), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(CRMWorkorderRequestFetch))]
        public async Task<HttpResponseMessage> CRMWorkorderRequestFetch(HttpRequestMessage request, [FromBody] CRMWorkorderRequestFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(CRMWorkorderRequestFetch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/CRMWorkorderRequestFetch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(CRMWorkorderRequestFetch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(TAndCCRMRequestNoSearch))]
        public async Task<HttpResponseMessage> TAndCCRMRequestNoSearch(HttpRequestMessage request, [FromBody] TAndCCRMRequestNoFetchSearch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(TAndCCRMRequestNoSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/TAndCCRMRequestNoSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(TAndCCRMRequestNoSearch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(PorteringWorkOrderNoSearch))]
        public async Task<HttpResponseMessage> PorteringWorkOrderNoSearch(HttpRequestMessage request, [FromBody] PortAssetFetchModel SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(PorteringWorkOrderNoSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/PorteringWorkOrderNoSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(PorteringWorkOrderNoSearch), Level.Info.ToString());
            return result;
        }

        [HttpPost(nameof(PorteringAssetNoSearch))]
        public async Task<HttpResponseMessage> PorteringAssetNoSearch(HttpRequestMessage request, [FromBody] PortAssetFetchModel SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(PorteringAssetNoSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/PorteringAssetNoSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(PorteringAssetNoSearch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(EODCaptureAssetFetch))]
        public async Task<HttpResponseMessage> EODCaptureAssetFetch(HttpRequestMessage request, [FromBody] EODCaptureAssetFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(EODCaptureAssetFetch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/EODCaptureAssetFetch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(EODCaptureAssetFetch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(EODCaptureManufacturer))]
        public async Task<HttpResponseMessage> EODCaptureManufacturer(HttpRequestMessage request, [FromBody] EODCaptureManufacturer SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(EODCaptureManufacturer), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/EODCaptureManufacturer", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(EODCaptureManufacturer), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(EODCaptureModel))]
        public async Task<HttpResponseMessage> EODCaptureModel(HttpRequestMessage request, [FromBody] EODCaptureModel SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(EODCaptureModel), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/EODCaptureModel", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(EODCaptureModel), Level.Info.ToString());
            return result;
        }

        [HttpPost(nameof(CustomerCodeSearch))]
        public async Task<HttpResponseMessage> CustomerCodeSearch(HttpRequestMessage request, [FromBody] CustomerFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(CustomerCodeSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/CustomerCodeSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(CustomerCodeSearch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(CRMRequestAssetFetch))]
        public async Task<HttpResponseMessage> CRMRequestAssetFetch(HttpRequestMessage request, [FromBody] CRMRequestAssetFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(CRMRequestAssetFetch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/CRMRequestAssetFetch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(CRMRequestAssetFetch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(CRMWorkorderStaffFetch))]
        public async Task<HttpResponseMessage> CRMWorkorderStaffFetch(HttpRequestMessage request, [FromBody] CRMWorkorderStaffFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(CRMWorkorderStaffFetch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/CRMWorkorderStaffFetch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(CRMWorkorderStaffFetch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(ContractorNameSearch))]
        public async Task<HttpResponseMessage> ContractorNameSearch(HttpRequestMessage request, [FromBody] ContractorNameSearch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(ContractorNameSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/ContractorNameSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(ContractorNameSearch), Level.Info.ToString());
            return result;
        }

        [HttpPost(nameof(BookingWorkOrderNoSearch))]
        public async Task<HttpResponseMessage> BookingWorkOrderNoSearch(HttpRequestMessage request, [FromBody] BookingFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(ContractorNameSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/BookingWorkOrderNoSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(ContractorNameSearch), Level.Info.ToString());
            return result;
        }

        [HttpPost(nameof(BookingAssetNoSearch))]
        public async Task<HttpResponseMessage> BookingAssetNoSearch(HttpRequestMessage request, [FromBody] BookingFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(ContractorNameSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/BookingAssetNoSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(ContractorNameSearch), Level.Info.ToString());
            return result;
        }
       
        [HttpPost(nameof(UserTainingParticipantFetch))]
        public async Task<HttpResponseMessage> UserTainingParticipantFetch(HttpRequestMessage request, [FromBody] UserTainingParticipantFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(UserTainingParticipantFetch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/UserTainingParticipantFetch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(UserTainingParticipantFetch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(FilureSymptomCodeFetch))]
        public async Task<HttpResponseMessage> FilureSymptomCodeFetch(HttpRequestMessage request, [FromBody] FilureSymptomCodeFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(FilureSymptomCodeFetch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/FilureSymptomCodeFetch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(FilureSymptomCodeFetch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(FollowupCarFetch))]
        public async Task<HttpResponseMessage> FollowupCarFetch(HttpRequestMessage request, [FromBody] FollowupCarFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(FollowupCarFetch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/FollowupCarFetch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(FollowupCarFetch), Level.Info.ToString());
            return result;
        }

        [HttpPost(nameof(UserShiftLeaveDetailsSearch))]
        public async Task<HttpResponseMessage> UserShiftLeaveDetailsSearch(HttpRequestMessage request, [FromBody] UserShiftLeaveDetailsFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(UserShiftLeaveDetailsSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/UserShiftLeaveDetailsSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(UserShiftLeaveDetailsSearch), Level.Info.ToString());
            return result;
        }

        [HttpPost("blockSearch")]
        public async Task<HttpResponseMessage> BlockCascCodeSearch(HttpRequestMessage request, [FromBody] AreaFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(BlockCascCodeSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/blockSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(BlockCascCodeSearch), Level.Info.ToString());
            return result;
        }


        [HttpPost("QCPPMSearch")]
        public async Task<HttpResponseMessage> QCPPMCodeSearch(HttpRequestMessage request, [FromBody] AreaFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(QCPPMCodeSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/QCPPMSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(QCPPMCodeSearch), Level.Info.ToString());
            return result;
        }

        [HttpPost("LevelCscSearch")]
        public async Task<HttpResponseMessage> LevelCascCodeSearch(HttpRequestMessage request, [FromBody] AreaFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(LevelCascCodeSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/LevelCscSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(LevelCascCodeSearch), Level.Info.ToString());
            return result;
        }

        [HttpPost(nameof(AreaCascCodeSearch))]
        public async Task<HttpResponseMessage> AreaCascCodeSearch(HttpRequestMessage request, [FromBody] AreaFetch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(AreaCascCodeSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/AreaCascCodeSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(AreaCascCodeSearch), Level.Info.ToString());
            return result;
        }
        [HttpPost(nameof(BookingLocationSearch))]
        public async Task<HttpResponseMessage> BookingLocationSearch(HttpRequestMessage request, [FromBody] UserLocationCodeSearch SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(BookingLocationSearch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("Search/BookingLocationSearch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(BookingLocationSearch), Level.Info.ToString());
            return result;
        }

    }
}
