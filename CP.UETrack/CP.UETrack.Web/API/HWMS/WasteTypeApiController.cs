using UETrack.Application.Web.Helpers;using CP.Framework.Common.Audit;using System.Net.Http;using System.Threading.Tasks;using System.Web.Http;using CP.Framework.Common.Logging;using CP.UETrack.Application.Web.API;using CP.UETrack.Model.HWMS;namespace UETrack.Application.Web.API.HWMS{    [RoutePrefix("api/WasteType")]    [WebApiAudit]    public class WasteTypeApiController : BaseApiController    {
        private readonly string _FileName = nameof(WasteTypeApiController);
        [HttpPost(nameof(Save))]        public async Task<HttpResponseMessage> Save(HttpRequestMessage request, [FromBody] WasteType wasteType)        {            Log4NetLogger.LogEntry(_FileName, nameof(Save), Level.Info.ToString());            var result = await RestHelper.ApiPost("WasteType/Save", wasteType);            Log4NetLogger.LogEntry(_FileName, nameof(Save), Level.Info.ToString());            return result;        }        [HttpGet(nameof(GetAll))]        public async Task<HttpResponseMessage> GetAll()        {            Log4NetLogger.LogEntry(_FileName, nameof(GetAll), Level.Info.ToString());            var filterData = GetQueryFiltersForGetAll();            var result = await RestHelper.ApiGet(string.Format("WasteType/GetAll?{0}", filterData));            Log4NetLogger.LogEntry(_FileName, nameof(GetAll), Level.Info.ToString());            return result;        }        [HttpGet("Get/{Id}")]        public async Task<HttpResponseMessage> Get(int Id)        {            Log4NetLogger.LogEntry(_FileName, nameof(Get), Level.Info.ToString());            var result = await RestHelper.ApiGet(string.Format("WasteType/Get/{0}", Id));            Log4NetLogger.LogEntry(_FileName, nameof(Get), Level.Info.ToString());            return result;        }        [HttpGet("Delete/{Id}")]        public async Task<HttpResponseMessage> Delete(int Id)        {            Log4NetLogger.LogEntry(_FileName, nameof(Delete), Level.Info.ToString());            var result = await RestHelper.ApiGet(string.Format("WasteType/Delete/{0}", Id));            Log4NetLogger.LogEntry(_FileName, nameof(Delete), Level.Info.ToString());            return result;        }
        [HttpGet(nameof(Load))]        public async Task<HttpResponseMessage> Load()        {            Log4NetLogger.LogEntry(_FileName, nameof(Load), Level.Info.ToString());            var result = await RestHelper.ApiGet("WasteType/Load");            Log4NetLogger.LogEntry(_FileName, nameof(Load), Level.Info.ToString());            return result;        }    }}