using UETrack.Application.Web.Helpers;
using CP.UETrack.Model.HWMS;
using CP.Framework.Common.Audit;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web.Http;
using CP.Framework.Common.Logging;
using CP.UETrack.Application.Web.API;
namespace UETrack.Application.Web.API.HWMS
{
    [RoutePrefix("api/CorrectiveActionReports")]
    [WebApiAudit]

    public class CorrectiveActionReportsApiController:BaseApiController
    {
        private readonly string _FileName = nameof(CorrectiveActionReportsApiController);

        public CorrectiveActionReportsApiController()
        {
        }
        [HttpPost(nameof(Save))]
        public async Task<HttpResponseMessage> Save(HttpRequestMessage request, [FromBody] CorrectiveActionReports CorrectiveActionReports)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(Save), Level.Info.ToString());
            var result = await RestHelper.ApiPost("CorrectiveActionReports/Save", CorrectiveActionReports);
            Log4NetLogger.LogEntry(_FileName, nameof(Save), Level.Info.ToString());
            return result;
        }
        [HttpGet(nameof(AutoGeneratedCode))]
        public async Task<HttpResponseMessage> AutoGeneratedCode()
        {
            Log4NetLogger.LogEntry(_FileName, nameof(AutoGeneratedCode), Level.Info.ToString());
            var filterData = GetQueryFiltersForGetAll();
            var result = await RestHelper.ApiGet(string.Format("CorrectiveActionReports/AutoGeneratedCode?{0}", filterData));
            Log4NetLogger.LogEntry(_FileName, nameof(AutoGeneratedCode), Level.Info.ToString());
            return result;
        }
        
        [HttpPost(nameof(AttachmentSave))]
        public async Task<HttpResponseMessage> AttachmentSave(HttpRequestMessage request, [FromBody] CorrectiveActionReports correctiveActionReport)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(AttachmentSave), Level.Info.ToString());
            var result = await RestHelper.ApiPost("CorrectiveActionReports/AttachmentSave", correctiveActionReport);
            Log4NetLogger.LogEntry(_FileName, nameof(AttachmentSave), Level.Info.ToString());
            return result;
        }

        [HttpPost(nameof(FollowUpCARNoFetch))]
        public async Task<HttpResponseMessage> FollowUpCARNoFetch(HttpRequestMessage request, [FromBody] CorrectiveActionReports SearchObject)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(FollowUpCARNoFetch), Level.Info.ToString());
            var result = await RestHelper.ApiPost("CorrectiveActionReports/FollowUpCARNoFetch", SearchObject);
            Log4NetLogger.LogEntry(_FileName, nameof(FollowUpCARNoFetch), Level.Info.ToString());
            return result;
        }
        [HttpGet(nameof(GetAll))]
        public async Task<HttpResponseMessage> GetAll()
        {
            Log4NetLogger.LogEntry(_FileName, nameof(GetAll), Level.Info.ToString());
            var filterData = GetQueryFiltersForGetAll();
            var result = await RestHelper.ApiGet(string.Format("CorrectiveActionReports/GetAll?{0}", filterData));
            Log4NetLogger.LogEntry(_FileName, nameof(GetAll), Level.Info.ToString());
            return result;
        }
        [HttpGet("Get/{Id}")]
        public async Task<HttpResponseMessage> Get(int Id)
        {
            Log4NetLogger.LogEntry(_FileName, nameof(Get), Level.Info.ToString());
            var result = await RestHelper.ApiGet(string.Format("CorrectiveActionReports/Get/{0}", Id));
            Log4NetLogger.LogEntry(_FileName, nameof(Get), Level.Info.ToString());
            return result;
        }


    }
}