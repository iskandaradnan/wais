using FluentValidation;
using FluentValidation.Internal;
using CP.UETrack.CLS.BusinessAccess.Interface;
using CP.UETrack.DAL.DataAccess.Contracts.HWMS;
using CP.UETrack.Model.HWMS;
using CP.UETrack.Model;
using System;
using CP.Framework.Common.Logging;
using CP.Framework.Common.ExceptionHandler.ExceptionWrappers;
using CP.UETrack.Models;
using System.Collections.Generic;
using CP.UETrack.BLL.BusinessAccess.Contracts.HWMS;

namespace CP.UETrack.BLL.BusinessAccess.Implementations.HWMS
{
    class CorrectiveActionReporstBAL:ICorrectiveActionReportsBAL
    {
        private string _FileName = nameof(BlockBAL);
        ICorrectiveActionReportsDAL _ICorrectiveActionReportsDAL;
        public CorrectiveActionReporstBAL(ICorrectiveActionReportsDAL CorrectiveActionReports)
        {
            _ICorrectiveActionReportsDAL = CorrectiveActionReports;
        }
        public CorrectiveActionReports Save(CorrectiveActionReports block, out string ErrorMessage)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Save), Level.Info.ToString());

                ErrorMessage = string.Empty;
                CorrectiveActionReports result = null;                
                result = _ICorrectiveActionReportsDAL.Save(block, out ErrorMessage);
                Log4NetLogger.LogExit(_FileName, nameof(Save), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public CorrectiveActionReports AutoGeneratedCode()
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(AutoGeneratedCode), Level.Info.ToString());
                var result = _ICorrectiveActionReportsDAL.AutoGeneratedCode();
                Log4NetLogger.LogExit(_FileName, nameof(AutoGeneratedCode), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }
        
        public List<CARAttachment> AttachmentSave(CorrectiveActionReports block, out string ErrorMessage)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(AttachmentSave), Level.Info.ToString());

                ErrorMessage = string.Empty;
                List<CARAttachment> result = null;

                result = _ICorrectiveActionReportsDAL.AttachmentSave(block, out ErrorMessage);

                Log4NetLogger.LogExit(_FileName, nameof(AttachmentSave), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public List<CorrectiveActionReports> FollowUpCARNoFetch(CorrectiveActionReports SearchObject)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(FollowUpCARNoFetch), Level.Info.ToString());
                var result = _ICorrectiveActionReportsDAL.FollowUpCARNoFetch(SearchObject);
                Log4NetLogger.LogExit(_FileName, nameof(FollowUpCARNoFetch), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public GridFilterResult GetAll(SortPaginateFilter pageFilter)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(GetAll), Level.Info.ToString());
                var result = _ICorrectiveActionReportsDAL.GetAll(pageFilter);
                Log4NetLogger.LogExit(_FileName, nameof(GetAll), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public CorrectiveActionReports Get(int Id)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Get), Level.Info.ToString());
                var result = _ICorrectiveActionReportsDAL.Get(Id);
                Log4NetLogger.LogExit(_FileName, nameof(Get), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }
    }
}
