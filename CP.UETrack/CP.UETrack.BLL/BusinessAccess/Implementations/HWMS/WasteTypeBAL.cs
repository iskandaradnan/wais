using CP.Framework.Common.ExceptionHandler.ExceptionWrappers;using CP.Framework.Common.Logging;using CP.UETrack.BLL.BusinessAccess.Contracts.HWMS;using CP.UETrack.BLL.BusinessAccess.Interface;using CP.UETrack.DAL.DataAccess.Contracts.HWMS;using CP.UETrack.Model;using CP.UETrack.Model.HWMS;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace CP.UETrack.BLL.BusinessAccess.Implementations.HWMS{    public class WasteTypeBAL : IWasteTypeBAL    {        private string _FileName = nameof(BlockBAL);        IWasteTypeDAL _wastetypeDAL;        public WasteTypeBAL(IWasteTypeDAL waste)        {            _wastetypeDAL = waste;        }        public WasteType Save(WasteType modal, out string ErrorMessage)        {            try            {                Log4NetLogger.LogEntry(_FileName, nameof(Save), Level.Info.ToString());                ErrorMessage = string.Empty;                WasteType result = null;                result = _wastetypeDAL.Save(modal, out ErrorMessage);                Log4NetLogger.LogExit(_FileName, nameof(Save), Level.Info.ToString());                return result;            }            catch (BALException balException)            {                throw new BALException(balException);            }            catch (Exception)            {                throw;            }        }        public WasteTypeLoad Load()        {
            try            {                Log4NetLogger.LogEntry(_FileName, nameof(Load), Level.Info.ToString());                var result = _wastetypeDAL.Load();                Log4NetLogger.LogExit(_FileName, nameof(Load), Level.Info.ToString());                return result;            }            catch (BALException balException)            {                throw new BALException(balException);            }            catch (Exception)            {                throw;            }        }        public GridFilterResult GetAll(SortPaginateFilter pageFilter)        {            try            {                Log4NetLogger.LogEntry(_FileName, nameof(GetAll), Level.Info.ToString());                var result = _wastetypeDAL.GetAll(pageFilter);                Log4NetLogger.LogExit(_FileName, nameof(GetAll), Level.Info.ToString());                return result;            }            catch (BALException balException)            {                throw new BALException(balException);            }            catch (Exception)            {                throw;            }        }        public WasteType Get(int Id)        {            try            {                Log4NetLogger.LogEntry(_FileName, nameof(Get), Level.Info.ToString());                var result = _wastetypeDAL.Get(Id);                Log4NetLogger.LogExit(_FileName, nameof(Get), Level.Info.ToString());                return result;            }            catch (BALException balException)            {                throw new BALException(balException);            }            catch (Exception)            {                throw;            }        }    }}