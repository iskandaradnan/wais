using FluentValidation;
using FluentValidation.Internal;
using CP.UETrack.CLS.BusinessAccess.Interface;
using CP.UETrack.DAL.DataAccess.Contracts.CLS;
using CP.UETrack.Model.CLS;
using System;
using CP.Framework.Common.Logging;
using CP.Framework.Common.ExceptionHandler.ExceptionWrappers;
using System.Collections.Generic;
using CP.UETrack.BLL.BusinessAccess.Contracts.CLS;

namespace CP.UETrack.BLL.BusinessAccess.Implementations.CLS
{
    public class CorrectiveActionReportBAL : ICorrectiveActionReportBAL
    {
        private string _FileName = nameof(BlockBAL);
        ICorrectiveActionReportDAL _CorrectiveActionReportDAL;
        public CorrectiveActionReportBAL(ICorrectiveActionReportDAL correctiveActionReport)
        {
            _CorrectiveActionReportDAL = correctiveActionReport;
        }
        public CorrectiveActionReportLovs Load()
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Load), Level.Info.ToString());
                var result = _CorrectiveActionReportDAL.Load();
                Log4NetLogger.LogExit(_FileName, nameof(Load), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public CorrectiveActionReport AutoGeneratedCode()
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(AutoGeneratedCode), Level.Info.ToString());
                var result = _CorrectiveActionReportDAL.AutoGeneratedCode();
                Log4NetLogger.LogExit(_FileName, nameof(AutoGeneratedCode), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public List<CorrectiveActionReport> CARNoFetch(CorrectiveActionReport SearchObject)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(CARNoFetch), Level.Info.ToString());
                var result = _CorrectiveActionReportDAL.CARNoFetch(SearchObject);
                Log4NetLogger.LogExit(_FileName, nameof(CARNoFetch), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public CorrectiveActionReport Save(CorrectiveActionReport block, out string ErrorMessage)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Save), Level.Info.ToString());

                ErrorMessage = string.Empty;
                CorrectiveActionReport result = null;


                result = _CorrectiveActionReportDAL.Save(block, out ErrorMessage);


                Log4NetLogger.LogExit(_FileName, nameof(Save), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public CARHistoryDetails GetCARHistoryDetails(int Id)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(GetCARHistoryDetails), Level.Info.ToString());
                var result = _CorrectiveActionReportDAL.GetCARHistoryDetails(Id);
                Log4NetLogger.LogExit(_FileName, nameof(GetCARHistoryDetails), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public List<CARAttachment> AttachmentSave(CorrectiveActionReport block, out string ErrorMessage)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(AttachmentSave), Level.Info.ToString());

                ErrorMessage = string.Empty;
                List<CARAttachment> result = null;

                result = _CorrectiveActionReportDAL.AttachmentSave(block, out ErrorMessage);

                Log4NetLogger.LogExit(_FileName, nameof(AttachmentSave), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public CP.UETrack.Model.GridFilterResult GetAll(CP.UETrack.Model.SortPaginateFilter pageFilter)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(GetAll), Level.Info.ToString());
                var result = _CorrectiveActionReportDAL.GetAll(pageFilter);
                Log4NetLogger.LogExit(_FileName, nameof(GetAll), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public CorrectiveActionReport Get(int Id)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Get), Level.Info.ToString());
                var result = _CorrectiveActionReportDAL.Get(Id);
                Log4NetLogger.LogExit(_FileName, nameof(Get), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }

    }
}
