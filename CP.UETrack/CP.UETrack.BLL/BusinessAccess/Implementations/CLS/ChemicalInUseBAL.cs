using FluentValidation;
using FluentValidation.Internal;
using CP.UETrack.CLS.BusinessAccess.Interface;
using CP.UETrack.DAL.DataAccess.Contracts.CLS;
using CP.UETrack.Model.CLS;
using CP.UETrack.Model;
using System;
using CP.Framework.Common.Logging;
using CP.Framework.Common.ExceptionHandler.ExceptionWrappers;
using CP.UETrack.Models;
using System.Collections.Generic;
using CP.UETrack.BLL.BusinessAccess.Contracts.CLS;

namespace CP.UETrack.BLL.BusinessAccess.Implementations.CLS
{
   public class ChemicalInUseBAL: IChemicalInUseBAL
    {
        private string _FileName = nameof(BlockBAL);
        IChemicalInUseDAL _ChemicalInUseDAL;
        public ChemicalInUseBAL(IChemicalInUseDAL chemicalInUse)
        {
            _ChemicalInUseDAL = chemicalInUse;
        }
        public ChemicalInUse Save(ChemicalInUse block, out string ErrorMessage)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Save), Level.Info.ToString());

                ErrorMessage = string.Empty;
                ChemicalInUse result = null;


                result = _ChemicalInUseDAL.Save(block, out ErrorMessage);


                Log4NetLogger.LogExit(_FileName, nameof(Save), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public List<ChemicalInUseAttachments> AttachmentSave(ChemicalInUse block, out string ErrorMessage)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(AttachmentSave), Level.Info.ToString());

                ErrorMessage = string.Empty;
                List<ChemicalInUseAttachments> result = null;

                result = _ChemicalInUseDAL.AttachmentSave(block, out ErrorMessage);

                Log4NetLogger.LogExit(_FileName, nameof(AttachmentSave), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }        
        public GridFilterResult GetAll(SortPaginateFilter pageFilter)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(GetAll), Level.Info.ToString());
                var result = _ChemicalInUseDAL.GetAll(pageFilter);
                Log4NetLogger.LogExit(_FileName, nameof(GetAll), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public ChemicalInUse Get(int Id)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Get), Level.Info.ToString());
                var result = _ChemicalInUseDAL.Get(Id);
                Log4NetLogger.LogExit(_FileName, nameof(Get), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public void Delete(int Id, out string ErrorMessage)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Delete), Level.Info.ToString());
                _ChemicalInUseDAL.Delete(Id, out ErrorMessage);
                Log4NetLogger.LogExit(_FileName, nameof(Delete), Level.Info.ToString());
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }
        public void CategoryRowsDelete(int ID, out string ErrorMessage)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(Delete), Level.Info.ToString());
                _ChemicalInUseDAL.CategoryRowsDelete(ID, out ErrorMessage);
                Log4NetLogger.LogExit(_FileName, nameof(CategoryRowsDelete), Level.Info.ToString());
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public ChemicalInUse AutoGeneratedCode()
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(AutoGeneratedCode), Level.Info.ToString());
                var result = _ChemicalInUseDAL.AutoGeneratedCode();
                Log4NetLogger.LogExit(_FileName, nameof(AutoGeneratedCode), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public Chemicals ChemicalNameData(int ChemicalId)
        {
            try
            {
                Log4NetLogger.LogEntry(_FileName, nameof(ChemicalNameData), Level.Info.ToString());
                var result = _ChemicalInUseDAL.ChemicalNameData(ChemicalId);
                Log4NetLogger.LogExit(_FileName, nameof(ChemicalNameData), Level.Info.ToString());
                return result;
            }
            catch (BALException balException)
            {
                throw new BALException(balException);
            }
            catch (Exception)
            {
                throw;
            }
        }

    }
}
